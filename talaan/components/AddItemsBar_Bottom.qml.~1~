import QtQuick 2.4
import Ubuntu.Components 1.3
//import Ubuntu.Keyboard 0.1

Item {
    id: addItemsBar

    property int hintSize: units.gu(8)
    property color hintColor: "#513838"
    property string hintIconName: "add"
    property alias hintIconSource: hintIcon.source
    property color hintIconColor: "white"//UbuntuColors.coolGrey
    property bool bottomEdgeEnabled: true
    property color bgColor: "black"
    property real bgOpacity: 0.6
    property real dialogHeight: addItemBar.height
    property real dialogWidth
    property real expandedPosition: 0.5 * height
    property real collapsedPosition: height - hintSize/2

    property bool enabled: false

    property alias itemName: textFieldName
    property alias comments: textAreaComments
    property string mode: "add"
    property alias isCommentsShown: btnAddComment.isCommentsShown

    signal showComments
    signal hideComments
    signal cancel
    signal saved
    signal collapseCompleted
    signal commitCompleted

    signal isExpanded
    signal isCollapsed

    anchors.fill: parent


    function commit(){
        bottomEdgeHint.state = "expanded"
    }

    function collapse(){
       // keyboard.target.hide()
        bottomEdgeHint.state = "collapsed"
    }

    function reset() {
        addItemsBar.mode = "add"
        isCommentsShown = false
        addItemBar.height = units.gu(6)
        textFieldName.text = ""
        textAreaComments.text = ""
    }


    onCommitCompleted: {
        textFieldName.forceActiveFocus()
    }

    onCollapseCompleted: {
        reset()
        //parent.forceActiveFocus()
        //addItemsBar.forceActiveFocus()
    }


    Rectangle {
        id: bottomEdgeHint

        color: hintColor
        width: hintSize
        height: width
        radius: width/2
        visible:keyboard.target.visible ? false : addItemsBar.enabled ?  true : false
        opacity: 0.7

        anchors.horizontalCenter: parent.horizontalCenter
        y: collapsedPosition
        z: parent.z + 1

        Icon {
            id: hintIcon
            width: hintSize/4
            height: width
            name: hintIconName
            color: hintIconColor
            anchors {
                centerIn: parent
                verticalCenterOffset: keyboard.target.visible === true ? 0 : width * ((bottomEdgeHint.y - expandedPosition)
                                               /(expandedPosition - collapsedPosition))
            }
        }

        MouseArea {
            id: mouseArea

            property real previousY: -1
            property string dragDirection: "None"

            z: 1
            anchors.fill: parent
            visible: bottomEdgeEnabled

            preventStealing: true
            drag {
                axis: Drag.YAxis
                target: bottomEdgeHint
                minimumY: expandedPosition
                maximumY: collapsedPosition
            }

            onReleased: {
                if ((dragDirection === "BottomToTop") &&
                        bottomEdgeHint.y < collapsedPosition) {
                    bottomEdgeHint.state = "expanded"

                } else {
                    if (bottomEdgeHint.state === "collapsed") {
                        bottomEdgeHint.y = collapsedPosition
                    }
                    bottomEdgeHint.state = "collapsed"
                }
                bottomEdgeHint.opacity = 0.7
                previousY = -1
                dragDirection = "None"
            }

            onClicked: {
                if (bottomEdgeHint.y === collapsedPosition)
                    bottomEdgeHint.state = "expanded"
                else
                    bottomEdgeHint.state = "collapsed"
            }

            onPressed: {
                previousY = bottomEdgeHint.y
                bottomEdgeHint.opacity = 1
            }

            onMouseYChanged: {
                var yOffset = previousY - bottomEdgeHint.y
                if (Math.abs(yOffset) <= units.gu(2)) {
                    return
                }
                previousY = bottomEdgeHint.y
                dragDirection = yOffset > 0 ? "BottomToTop" : "TopToBottom"
            }
        }
        state: "collapsed"
        states: [
            State {
                name: "collapsed"
                PropertyChanges {
                    target: bottomEdgeHint
                    y: collapsedPosition
                    visible: addItemsBar.enabled ? true : false
                }
                PropertyChanges {
                    target: addItemBar
                    state: "collapsed"
                }
            },
            State {
                name: "expanded"
                PropertyChanges {
                    target: bottomEdgeHint
                    y: expandedPosition
                    visible: false
                }
                PropertyChanges {
                    target: addItemBar
                    state: "expanded"
                }
            }/*,

            State {
                name: "floating"
                when: mouseArea.drag.active
                PropertyChanges {
                    target: bottomEdgeHint
                    opacity: 1
                }
            }*/
        ]

        transitions: [
            Transition {
                id: transi
                to: "expanded"
                SmoothedAnimation {
                    id:anim
                    target: bottomEdgeHint
                    property: "y"
                    duration: UbuntuAnimation.BriskDuration
                }
                onRunningChanged:  {
                    if(!running){
                        isExpanded();
                    }
                }
            },

            Transition {
                to: "collapsed"
                SmoothedAnimation {
                    target: bottomEdgeHint
                    property: "y"
                    duration: UbuntuAnimation.BriskDuration
                }
                onRunningChanged:  {

                    if(!running){
                        isCollapsed();
                    }
                }
            }
        ]
    }
    Rectangle {
        id: addItemBar
        color: "#463030"

        property real startPosition: parent.height
        property real endPosition: parent.height - addItemBar.height

        height:  units.gu(6)
        y: startPosition
        //visible: state === "collapsed" ? false : true
        anchors{
            left: parent.left
            right: parent.right
            top: parent.bottom
        }

        UbuntuNumberAnimation on height {
            id: resizeBigAnimation
            from: units.gu(6)
            to: units.gu(16)
            duration: UbuntuAnimation.BriskDuration
            easing: UbuntuAnimation.StandardEasing
            running: false
        }
        UbuntuNumberAnimation on height {
            id: resizeSmallAnimation
            from: units.gu(16)
            to: units.gu(6)
            duration: UbuntuAnimation.BriskDuration
            easing: UbuntuAnimation.StandardEasing
            running: false
        }

        Button {
            id: btnAddComment
            property bool isCommentsShown: false

            width: textFieldName.height
            height: width
            color: "transparent"
            activeFocusOnPress: false

            action: Action {
                iconName: "message"
                shortcut: "Ctrl+D"
                onTriggered: {
                    btnAddComment.isCommentsShown = !btnAddComment.isCommentsShown
                }
            }

            onIsCommentsShownChanged: {
                if (isCommentsShown) {
                    addItemsBar.showComments()
                    resizeBigAnimation.running = true
                    textAreaComments.visible = true
                    textAreaComments.openingAnimation.running = true
                } else {
                    textAreaComments.visible = false
                    resizeSmallAnimation.running = true
                    addItemsBar.hideComments()
                    textFieldName.forceActiveFocus()
                }
            }

            anchors {
                left: parent.left
                leftMargin: units.gu(0.5)
                bottom: parent.bottom
                bottomMargin: units.gu(1)
            }
        }

        TextField {
            id: textFieldName
            // this value is to avoid letter being cut off
            height: units.gu(4.3)
            visible: false
            //InputMethod.extensions: { "enterKeyText": i18n.dtr("talaan-app", addItemsBar.mode === "add" ? "Add" : "Save") }

//            onActiveFocusChanged: {
//                if(activeFocus){
//                    keyboard.target.extensions = { "enterKeyText": i18n.dtr("talaan-app", addItemsBar.mode === "add" ? "Add" : "Save") }
//                }
//            }

            anchors {
                left: btnAddComment.right
                leftMargin: units.gu(0.5)
                right: btnGoDown.left
                rightMargin: units.gu(0.5)
                top: parent.top
                topMargin: units.gu(1)
            }

            onActiveFocusChanged: {
                if(activeFocus){
                    btnGoDown.action.shortcut = "Esc"
                }else{
                    btnGoDown.action.shortcut = " "
                }
            }

            placeholderText: i18n.tr("Enter item name")
            hasClearButton: true
        }

        Button {
            id: btnGoDown
            width: textFieldName.height
            height: width
            color: "transparent"
            activeFocusOnPress: false
            action: Action {
                iconName:  "close" //"go-down"
                //shortcut: "Esc"
                onTriggered: {
                    addItemsBar.cancel()
                    addItemsBar.collapse()
                }
            }
            anchors {
                right: btnAdd.left
                rightMargin: units.gu(0.5)
                bottom: parent.bottom
                bottomMargin: units.gu(1)
            }
        }

        Button {
            id: btnAdd
            width: textFieldName.height
            height: width
            activeFocusOnPress: false
            color: "transparent"
            action: Action {
                shortcut: textFieldName.activeFocus ? StandardKey.InsertParagraphSeparator : " "
                iconName: addItemsBar.mode === "add" ? "add" : "save"
                onTriggered: {
                    //btnAddComment.isCommentsShown = false
                    save()
                }
            }
            anchors {
                right: parent.right
                rightMargin: units.gu(0.5)
                bottom: parent.bottom
                bottomMargin: units.gu(1)
            }
        }
        TextArea {
            id: textAreaComments
            property alias openingAnimation: openingAnimation
            placeholderText: i18n.tr("Add Comments/Notes")
            visible: false
            height: units.gu(8.6)
            maximumLineCount: 2
            anchors {
                left: textFieldName.left
                right: textFieldName.right
                top: textFieldName.bottom
                topMargin: units.gu(1)
            }

            onVisibleChanged: {
                if (visible) {
                    textAreaComments.forceActiveFocus()
                }
            }

            UbuntuNumberAnimation on opacity {
                id: openingAnimation
                from: 0
                to: 1
                duration: UbuntuAnimation.SleepyDuration
                easing: UbuntuAnimation.StandardEasing
                running: false
            }
        }
        onStateChanged: {
            console.log("state: " + state);
        }

        state: "collapsed"
        states: [
            State {
                name: "collapsed"
                AnchorChanges {
                    target: addItemBar
                    anchors.bottom: undefined
                    anchors.top: parent.bottom
                }
                PropertyChanges {
                    target: textFieldName
                    visible: false
                }
                PropertyChanges {
                    target: textAreaComments
                    visible: false
                }
            },
            State {
                name: "expanded"
                AnchorChanges {
                    target: addItemBar
                    anchors.bottom: parent.bottom
                    anchors.top: undefined
                }
                PropertyChanges {
                    target: textFieldName
                    visible: true
                }
            }
        ]

        transitions: [
            Transition {
                to: "expanded"

                AnchorAnimation{
                    duration: UbuntuAnimation.BriskDuration
                    easing: UbuntuAnimation.StandardEasing
                }

                onRunningChanged:  {
                    if(!running){
                        console.log("expanded")
                        commitCompleted()
                    }
                }
            },

            Transition {
                to: "collapsed"

                AnchorAnimation{
                    duration: UbuntuAnimation.BriskDuration
                    easing: UbuntuAnimation.StandardEasing
                }
                onRunningChanged:  {
                    if(!running){
                        console.log("collapsed")
                        collapseCompleted()
                    }
                }
            }
        ]
    }
    Connections {
        id: keyboard
        target: Qt.inputMethod
    }
}
